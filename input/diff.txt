1c1
< #!/usr/bin/python
---
> #!/usr/bin/env python
34a35,37
> import roslib; roslib.load_manifest('ps3joy')
> import rospy
> from diagnostic_msgs.msg import DiagnosticArray, DiagnosticStatus, KeyValue
41c44
< import sys                    
---
> import sys
43a47,49
> from array import array
> import sensor_msgs.msg
> import rosgraph.masterapi
54a61
> 
84c91
<         
---
> 
109c116
<         
---
> 
112c119
<         
---
> 
116c123
<         
---
> 
122c129
<     
---
> 
140,142c147,149
<     def __init__(self, inactivity_timeout = float(1e3000)):
<         #buttons=[uinput.BTN_SELECT, uinput.BTN_THUMBL, uinput.BTN_THUMBR, uinput.BTN_START, 
<         #         uinput.BTN_FORWARD, uinput.BTN_RIGHT, uinput.BTN_BACK, uinput.BTN_LEFT, 
---
>     def __init__(self, deamon, inactivity_timeout = float(1e3000)):
>         #buttons=[uinput.BTN_SELECT, uinput.BTN_THUMBL, uinput.BTN_THUMBR, uinput.BTN_START,
>         #         uinput.BTN_FORWARD, uinput.BTN_RIGHT, uinput.BTN_BACK, uinput.BTN_LEFT,
167c174
<         self.outlen = len(buttons) + len(axes)           
---
>         self.outlen = len(buttons) + len(axes)
169c176,177
< 
---
>         self.deamon = deamon
>         self.init_ros()
173a182,227
>     def init_ros(self):
>         try:
>             rospy.init_node('ps3joy',anonymous=True, disable_signals=True)        
>         except:
>             print "rosnode init failed"
>         rospy.Subscriber("joy/set_feedback",sensor_msgs.msg.JoyFeedbackArray,self.set_feedback)
>         self.diagnostics = Diagnostics()
>         self.led_values = [1,0,0,0]
>         self.rumble_cmd = [0, 255]
>         self.led_cmd  = 2
>         self.core_down = False
> 
>     #********************************************************************************
>     #Raw Data Format
>     #unsigned char ReportType;         //Report Type 01
>     #unsigned char Reserved1;          // Unknown
>     #unsigned int  ButtonState;        // Main buttons
>     #unsigned char PSButtonState;      // PS button
>     #unsigned char Reserved2;          // Unknown
>     #unsigned char LeftStickX;         // left Joystick X axis 0 - 255, 128 is mid
>     #unsigned char LeftStickY;         // left Joystick Y axis 0 - 255, 128 is mid
>     #unsigned char RightStickX;        // right Joystick X axis 0 - 255, 128 is mid
>     #unsigned char RightStickY;        // right Joystick Y axis 0 - 255, 128 is mid
>     #unsigned char Reserved3[4];       // Unknown
>     #unsigned char PressureUp;         // digital Pad Up button Pressure 0 - 255
>     #unsigned char PressureRight;      // digital Pad Right button Pressure 0 - 255
>     #unsigned char PressureDown;       // digital Pad Down button Pressure 0 - 255
>     #unsigned char PressureLeft;       // digital Pad Left button Pressure 0 - 255
>     #unsigned char PressureL2;         // digital Pad L2 button Pressure 0 - 255
>     #unsigned char PressureR2;         // digital Pad R2 button Pressure 0 - 255
>     #unsigned char PressureL1;         // digital Pad L1 button Pressure 0 - 255
>     #unsigned char PressureR1;         // digital Pad R1 button Pressure 0 - 255
>     #unsigned char PressureTriangle;   // digital Pad Triangle button Pressure 0 - 255
>     #unsigned char PressureCircle;     // digital Pad Circle button Pressure 0 - 255
>     #unsigned char PressureCross;      // digital Pad Cross button Pressure 0 - 255
>     #unsigned char PressureSquare;     // digital Pad Square button Pressure 0 - 255
>     #unsigned char Reserved4[3];       // Unknown
>     #unsigned char Charge;             // charging status ? 02 = charge, 03 = normal
>     #unsigned char Power;              // Battery status
>     #unsigned char Connection;         // Connection Type
>     #unsigned char Reserved5[9];       // Unknown
>     #unsigned int AccelerometerX;      // X axis accelerometer Big Endian 0 - 1023
>     #unsigned int Accelero             // Y axis accelerometer Big Endian 0 - 1023
>     #unsigned int AccelerometerZ;      // Z axis accelerometer Big Endian 0 - 1023
>     #unsigned int GyrometerX;          // Z axis Gyro Big Endian 0 - 1023
>     #*********************************************************************************
176,177c230,233
<             joy_coding = "!1B2x3B1x4B4x12B15x4H"
<             data = list(struct.unpack(joy_coding, rawdata))
---
>             joy_coding = "!1B2x3B1x4B4x12B3x1B1B1B9x4H"
>             all_data = list(struct.unpack(joy_coding, rawdata)) #removing power data
>             state_data = all_data[20:23]
>             data = all_data[0:20]+all_data[23:]
178a235
>             self.diagnostics.publish(state_data)
189c246
<             axis_motion = [abs(out[17:][i] - self.axmid[i]) > 20 for i in range(0,len(out)-17-4)]  
---
>             axis_motion = [abs(out[17:][i] - self.axmid[i]) > 20 for i in range(0,len(out)-17-4)]
204a262,287
> 
>     def set_feedback(self,msg):
>         for feedback in msg.array:
>             if feedback.type == sensor_msgs.msg.JoyFeedback.TYPE_LED and feedback.id < 4:
>                 self.led_values[feedback.id] = int(round(feedback.intensity))
>             elif feedback.type == sensor_msgs.msg.JoyFeedback.TYPE_RUMBLE and feedback.id < 2:
>                 self.rumble_cmd[feedback.id] = int(feedback.intensity*255)                
>             else:
>                 rospy.logwarn("Feedback %s of type %s does not exist for this joystick.",feedback.id, feedback.type)
>         self.led_cmd = self.led_values[0]*pow(2,1) + self.led_values[1]*pow(2,2) + self.led_values[2]*pow(2,3) + self.led_values[3]*pow(2,4) 
>         self.new_msg = True
>     
>     def send_cmd(self, ctrl):
>         command = [0x52,
>                    0x01,
>                    0x00, 0xfe, self.rumble_cmd[1], 0xfe, self.rumble_cmd[0],        # rumble values
>                    0x00, 0x00, 0x00, 0x00, self.led_cmd,
>                    0xff, 0x27, 0x10, 0x00, 0x32,        # LED 4
>                    0xff, 0x27, 0x10, 0x00, 0x32,        # LED 3
>                    0xff, 0x27, 0x10, 0x00, 0x32,        # LED 2
>                    0xff, 0x27, 0x10, 0x00, 0x32,        # LED 1
>                    0x00, 0x00, 0x00, 0x00, 0x00
>                    ]
>         ctrl.send(array('B', command).tostring())
>         self.new_msg = False
> 
218a302,305
>                         self.send_cmd(ctrl)
>                         time.sleep(0.5)
>                         self.rumble_cmd[1] = 0
>                         self.send_cmd(ctrl)
221a309,310
>                         #if(self.new_msg):
>                             #self.send_cmd(ctrl)
228a318,336
>                     if not rosgraph.masterapi.is_online():
>                         print "The roscore or node shutdown, ps3joy shutting down."
>                         return
>                         #for when we can restart a rosnode
> #                        if self.deamon:
> #                            self.core_down= True
> #                        else:
> #                            print "The roscore shutdown, ps3joy shutting down. Run with --deamon if you want ps3joy to respawn"
> #                            return
> #                    if self.core_down == True:
> #                        try:
> #                            rosgraph.masterapi.is_online()
> #                            self.init_ros()
> #                            self.core_down = False
> #                            print "succeeded bringing node up"
> #                        except:
> #                            print "failed to bring node up"
> #                            pass
> 
245a354,409
> class Diagnostics():
>     def __init__(self):
>         self.charging_state =  {0:"Charging",
>                                 2:"Charging",
>                                 3:"Not Charging"}
>         self.connection     =  {18:"USB Connection",
>                                 20:"Rumbling",
>                                 22:"Bluetooth Connection"}
>         self.battery_state  =  {0:"No Charge",
>                                 1:"20% Charge",
>                                 2:"40% Charge",
>                                 3:"60% Charge",
>                                 4:"80% Charge",
>                                 5:"100% Charge",
>                                 238:"Charging"}
>         self.diag_pub = rospy.Publisher('/diagnostics', DiagnosticArray)
>         self.last_diagnostics_time = rospy.get_rostime()
> 
>     def publish(self, state):
>         curr_time = rospy.get_rostime()
>         # limit to 1hz
>         if (curr_time - self.last_diagnostics_time).to_sec() < 1.0:
>             return
>         self.last_diagnostics_time = curr_time
>         diag = DiagnosticArray()
>         diag.header.stamp = curr_time
>         #battery info
>         stat = DiagnosticStatus(name="Battery", level=DiagnosticStatus.OK, message="OK")
>         try:
>             stat.message = self.battery_state[state[1]]
>             if state[1]<3:
>                 stat.level = DiagnosticStatus.WARN
>                 stat.message = "Please Recharge Battery (%s)."%self.battery_state[state[1]]
>         except KeyError as ex:
>             stat.message = "Invalid Battery State %s"%ex
>             rospy.logwarn("Invalid Battery State %s"%ex)
>         diag.status.append(stat)
>         #battery info
>         stat = DiagnosticStatus(name="Connection", level=DiagnosticStatus.OK, message="OK")
>         try:
>             stat.message = self.connection[state[2]]
>         except KeyError as ex:
>             stat.message = "Invalid Connection State %s"%ex
>             rospy.logwarn("Invalid Connection State %s"%ex)
>         diag.status.append(stat)
>         #battery info
>         stat = DiagnosticStatus(name="Charging State", level=DiagnosticStatus.OK, message="OK")
>         try:
>             stat.message = self.charging_state[state[0]]
>         except KeyError as ex:
>             stat.message = "Invalid Charging State %s"%ex
>             rospy.logwarn("Invalid Charging State %s"%ex)
>         diag.status.append(stat)
>         #publish
>         self.diag_pub.publish(diag)
> 
258c422
<         os.system("hciconfig hci0 pscan > /dev/null 2>&1")   
---
>         os.system("hciconfig hci0 pscan > /dev/null 2>&1")
284c448
<                 continue 
---
>                 continue
297c461
<     
---
> 
314c478
<                     
---
> 
324a489
>                             quit(0)
330c495
<                     intr.close()        
---
>                     intr.close()
334c499,500
<                 print "CTRL+C detected. Exiting."
---
>                 print "\nCTRL+C detected. Exiting."
>                 rospy.signal_shutdown("\nCTRL+C detected. Exiting.")
340,341c506
<             print
<                     
---
> 
345c510,511
<                     
---
> #deamon_string = "--deamon"
> 
346a513
> #    print "usage: ps3joy.py ["+inactivity_timout_string+"=<n>] ["+no_disable_bluetoothd_string+"] ["+redirect_output_string+"]=<f> ["+deamon_string+"]=<d>"
349a517
> #    print "<d>: runs in deamon mode respawning node when roscore goes down."
366a535
>         deamon = False
388c557
<                     sys.stdout = open(str_value, "a", 1)        
---
>                     sys.stdout = open(str_value, "a", 1)
392a562,563
> #            elif arg == deamon_string:
> #                deamon = True
409c580
<             cm = connection_manager(decoder(inactivity_timeout = inactivity_timeout))
---
>             cm = connection_manager(decoder(deamon, inactivity_timeout = inactivity_timeout))
417c588,589
<         print "CTRL+C detected. Exiting."
---
>         print "\nCTRL+C detected. Exiting."
>         rospy.signal_shutdown("\nCTRL+C detected. Exiting.")
