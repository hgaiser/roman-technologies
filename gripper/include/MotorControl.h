/* Auto-generated by genmsg_cpp for file /home/kelvin/wilson/roman-technologies/roman/gripper/msg/MotorControl.msg */
#ifndef GRIPPER_MESSAGE_MOTORCONTROL_H
#define GRIPPER_MESSAGE_MOTORCONTROL_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace gripper
{
template <class ContainerAllocator>
struct MotorControl_ {
  typedef MotorControl_<ContainerAllocator> Type;

  MotorControl_()
  : modeStr()
  , value(0.0)
  , waitTime(0)
  {
  }

  MotorControl_(const ContainerAllocator& _alloc)
  : modeStr(_alloc)
  , value(0.0)
  , waitTime(0)
  {
  }

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _modeStr_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  modeStr;

  typedef float _value_type;
  float value;

  typedef int32_t _waitTime_type;
  int32_t waitTime;


private:
  static const char* __s_getDataType_() { return "gripper/MotorControl"; }
public:
  ROS_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROS_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "dbda82c03f69a91bc5adcefb5822c058"; }
public:
  ROS_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROS_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "string modeStr\n\
float32 value\n\
int32 waitTime\n\
\n\
"; }
public:
  ROS_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    ros::serialization::serialize(stream, modeStr);
    ros::serialization::serialize(stream, value);
    ros::serialization::serialize(stream, waitTime);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    ros::serialization::deserialize(stream, modeStr);
    ros::serialization::deserialize(stream, value);
    ros::serialization::deserialize(stream, waitTime);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    size += ros::serialization::serializationLength(modeStr);
    size += ros::serialization::serializationLength(value);
    size += ros::serialization::serializationLength(waitTime);
    return size;
  }

  typedef boost::shared_ptr< ::gripper::MotorControl_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::gripper::MotorControl_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct MotorControl
typedef  ::gripper::MotorControl_<std::allocator<void> > MotorControl;

typedef boost::shared_ptr< ::gripper::MotorControl> MotorControlPtr;
typedef boost::shared_ptr< ::gripper::MotorControl const> MotorControlConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::gripper::MotorControl_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::gripper::MotorControl_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace gripper

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::gripper::MotorControl_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::gripper::MotorControl_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::gripper::MotorControl_<ContainerAllocator> > {
  static const char* value() 
  {
    return "dbda82c03f69a91bc5adcefb5822c058";
  }

  static const char* value(const  ::gripper::MotorControl_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xdbda82c03f69a91bULL;
  static const uint64_t static_value2 = 0xc5adcefb5822c058ULL;
};

template<class ContainerAllocator>
struct DataType< ::gripper::MotorControl_<ContainerAllocator> > {
  static const char* value() 
  {
    return "gripper/MotorControl";
  }

  static const char* value(const  ::gripper::MotorControl_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::gripper::MotorControl_<ContainerAllocator> > {
  static const char* value() 
  {
    return "string modeStr\n\
float32 value\n\
int32 waitTime\n\
\n\
";
  }

  static const char* value(const  ::gripper::MotorControl_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::gripper::MotorControl_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.modeStr);
    stream.next(m.value);
    stream.next(m.waitTime);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct MotorControl_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::gripper::MotorControl_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::gripper::MotorControl_<ContainerAllocator> & v) 
  {
    s << indent << "modeStr: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.modeStr);
    s << indent << "value: ";
    Printer<float>::stream(s, indent + "  ", v.value);
    s << indent << "waitTime: ";
    Printer<int32_t>::stream(s, indent + "  ", v.waitTime);
  }
};


} // namespace message_operations
} // namespace ros

#endif // GRIPPER_MESSAGE_MOTORCONTROL_H

