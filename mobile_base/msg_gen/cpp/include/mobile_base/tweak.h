/* Auto-generated by genmsg_cpp for file /home/kelvin/wilson/roman-technologies/mobile_base/msg/tweak.msg */
#ifndef MOBILE_BASE_MESSAGE_TWEAK_H
#define MOBILE_BASE_MESSAGE_TWEAK_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace mobile_base
{
template <class ContainerAllocator>
struct tweak_ {
  typedef tweak_<ContainerAllocator> Type;

  tweak_()
  : data(0)
  , motorID(0)
  {
  }

  tweak_(const ContainerAllocator& _alloc)
  : data(0)
  , motorID(0)
  {
  }

  typedef int32_t _data_type;
  int32_t data;

  typedef int32_t _motorID_type;
  int32_t motorID;


private:
  static const char* __s_getDataType_() { return "mobile_base/tweak"; }
public:
  ROS_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROS_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "2f63c8c19490acbf4d6d60c299883f03"; }
public:
  ROS_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROS_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "int32 data\n\
int32 motorID\n\
"; }
public:
  ROS_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    ros::serialization::serialize(stream, data);
    ros::serialization::serialize(stream, motorID);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    ros::serialization::deserialize(stream, data);
    ros::serialization::deserialize(stream, motorID);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    size += ros::serialization::serializationLength(data);
    size += ros::serialization::serializationLength(motorID);
    return size;
  }

  typedef boost::shared_ptr< ::mobile_base::tweak_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mobile_base::tweak_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct tweak
typedef  ::mobile_base::tweak_<std::allocator<void> > tweak;

typedef boost::shared_ptr< ::mobile_base::tweak> tweakPtr;
typedef boost::shared_ptr< ::mobile_base::tweak const> tweakConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::mobile_base::tweak_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::mobile_base::tweak_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace mobile_base

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::mobile_base::tweak_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::mobile_base::tweak_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::mobile_base::tweak_<ContainerAllocator> > {
  static const char* value() 
  {
    return "2f63c8c19490acbf4d6d60c299883f03";
  }

  static const char* value(const  ::mobile_base::tweak_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x2f63c8c19490acbfULL;
  static const uint64_t static_value2 = 0x4d6d60c299883f03ULL;
};

template<class ContainerAllocator>
struct DataType< ::mobile_base::tweak_<ContainerAllocator> > {
  static const char* value() 
  {
    return "mobile_base/tweak";
  }

  static const char* value(const  ::mobile_base::tweak_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::mobile_base::tweak_<ContainerAllocator> > {
  static const char* value() 
  {
    return "int32 data\n\
int32 motorID\n\
";
  }

  static const char* value(const  ::mobile_base::tweak_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::mobile_base::tweak_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::mobile_base::tweak_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.data);
    stream.next(m.motorID);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct tweak_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mobile_base::tweak_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::mobile_base::tweak_<ContainerAllocator> & v) 
  {
    s << indent << "data: ";
    Printer<int32_t>::stream(s, indent + "  ", v.data);
    s << indent << "motorID: ";
    Printer<int32_t>::stream(s, indent + "  ", v.motorID);
  }
};


} // namespace message_operations
} // namespace ros

#endif // MOBILE_BASE_MESSAGE_TWEAK_H

